parameters:  
  - name: subscription
    type: string

jobs:
  - deployment: Functions
    displayName: 'Deploy Functions'
    dependsOn: ['Deploy_Infrastructure']
    environment: Functions

    variables:
      - group: Functions - AKS
      - group: AKS - DEV
      - group: ACR
      - group: Functions - Terraform - AKS
      - name: BuildNumber
        value: $(Build.BuildNumber)

    strategy:
      runOnce:
        deploy:
          steps:
            - download: current
              displayName: 'Download variables'
              artifact: VariableFiles

            - download: current
              displayName: 'Download FunctionsDeployment'
              artifact: FunctionsDeployment

            - bash: |
                echo "##vso[task.setvariable variable=ApplicationInsightsInstrumentationKey]$(cat $(Pipeline.Workspace)/VariableFiles/ApplicationInsightsInstrumentationKey)"
                echo "##vso[task.setvariable variable=StorageConnectionString]$(cat $(Pipeline.Workspace)/VariableFiles/StorageConnectionString)"
                echo "##vso[task.setvariable variable=ResourceGroupName]$(cat $(Pipeline.Workspace)/VariableFiles/ResourceGroupName)"
              displayName: 'Load file variables to pipeline variables'

            - task: colinsalmcorner.colinsalmcorner-buildtasks.replace-tokens-task.ReplaceTokens@1
              displayName: "Replace tokens in FunctionsDeployment"
              inputs:
                sourcePath: "$(Pipeline.Workspace)/FunctionsDeployment"
                filePattern: "*.yaml*"
                tokenRegex: '__{(\w+)}__'

            - task: Kubernetes@1
              displayName: Function
              inputs:
                connectionType: Azure Resource Manager
                azureSubscriptionEndpoint: '${{parameters.subscription}}'
                azureResourceGroup: '$(AksResourceGroupName)'
                kubernetesCluster: '$(AksResourceName)'
                useClusterAdmin: true
                namespace: '$(Namespace)'
                command: apply
                forceUpdateConfigMap: true
                arguments: -f $(Pipeline.Workspace)/FunctionsDeployment